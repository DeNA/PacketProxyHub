/*
 * Copyright 2021 DeNA Co., Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.packetproxyhub.application;

import com.google.common.collect.ImmutableMap;
import com.google.gson.Gson;
import com.packetproxyhub.entity.*;
import com.packetproxyhub.repository.sqlite.SqliteRepository;
import org.junit.jupiter.api.*;

import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

import static java.lang.Thread.sleep;
import static org.junit.jupiter.api.Assertions.*;

@Disabled
public class AppTest {
    static Thread server;

    @BeforeAll
    static public void setup() throws Exception {
        SqliteRepository.deleteSqliteFile(System.getenv("HOME") + "/db/packetproxyhub.db");
        server = new Thread( () -> {
            App.main(null);
        });
        server.start();
        sleep(5000); // 5s
    }

    @AfterAll
    static public void tearDown() {
        server.stop();
    }

    private ApiClient client;

    @BeforeEach
    public void setupBeforeEachTest() throws Exception {
        client = new ApiClient();
    }

    @Nested
    class 組織に関するテスト {
        @Test
        public void 複数の組織を取得できる() throws Exception {
            login("multiple.org.test", "multiple.org.test@example.com");
            createOrg("{ \"name\": \"multiple-org-test1\" }" );
            createOrg("{ \"name\": \"multiple-org-test2\" }" );
            Orgs orgs = getOrgs();
            assertEquals(2, orgs.size());
        }
    }

    @Nested
    class プロジェクトに関するテスト {
        @Test
        public void 複数のプロジェクトを取得できる() throws Exception {
            login("multiple.project.test", "multiple.project.test@example.com");
            Id orgId = createOrg("{ \"name\": \"multiple-project-test\" }" );
            createProject(orgId, "{ \"name\": \"multiple-project-test1\" }" );
            createProject(orgId, "{ \"name\": \"multiple-project-test2\" }" );
            createProject(orgId, "{ \"name\": \"multiple-project-test3\" }" );
            Projects projects = getProjectAll(orgId);
            assertEquals(3, projects.size());
        }
    }

    @Nested
    class アカウントに関するテスト {
        @Test
        public void アカウントを登録してアクセスできる() throws Exception {
            Id accountId = createAccount("{ \"mail\" : \"account.test@example.com\" }");
            login("account.test", "account.test@example.com");
            Account account = getAccount(accountId);
            assertEquals(Mail.create("account.test@example.com"), account.getMail());
        }

        @Test
        public void アカウント情報にmeでアクセスできる() throws Exception {
            Id accountId = createAccount("{ \"mail\" : \"account.me.test@example.com\" }");
            login("account.me.test", "account.me.test@example.com");
            Account account = getAccount("me");
            assertEquals(Mail.create("account.me.test@example.com"), account.getMail());
        }

        @Test
        public void アカウントを重複して作るとエラーになる() throws Exception {
            createAccount("{ \"mail\" : \"duplicate.account.error@example.com\" }");
            assertThrows(Exception.class, () -> createAccount("{ \"mail\" : \"duplicate.account.error@example.com\" }"));
        }

        @Test
        public void アカウントを更新できる() throws Exception {
            Id accountId = createAccount(new Gson().toJson(ImmutableMap.of(
                    "mail", "update.account@example.com",
                    "name", "update.account")));
            login("update.account", "update.account@example.com");
            updateAccount(accountId, new Gson().toJson(ImmutableMap.of(
                    "id", accountId.toString(),
                    "mail", "update.account@example.com",
                    "name", "update.account.2")));
            Account account = getAccount(accountId);
            assertEquals(Name.create("update.account.2"), account.getName());
        }
    }

    @Test
    public void 組織を作れる() throws Exception {
        login("create.org", "create.org@example.com");
        createOrg("{ \"name\": \"create.org\" }" );
    }

    @Test
    public void プロジェクトを作り全プロジェクトを取得できる() throws Exception {
        login("create.org.project", "create.org.project@example.com");
        Id orgId = createOrg("{}");
        createProject(orgId, "{ \"name\": \"create.org.project1\" }" );
        createProject(orgId, "{ \"name\": \"create.org.project2\" }" );
        createProject(orgId, "{ \"name\": \"create.org.project3\" }" );
        Ids projectIds = listProjects(orgId);
        assertTrue(projectIds.size() >= 3);
    }

    @Test
    public void プロジェクトを作り特定のプロジェクトを取得できる() throws Exception {
        login("create.project", "create.project@example.com");
        Id orgId = createOrg("{}");
        String name = "name-" + UUID.randomUUID();
        Id projectId = createProject(orgId, "{\"name\": \"" + name + "\"}");
        Project project = getProject(orgId, projectId);
        assertEquals(name, project.getName());
    }

    @Test
    public void プロジェクトを作り削除できる() throws Exception {
        login("delete.project", "delete.project@example.com");
        Id orgId = createOrg("{}");
        String name = "name-" + UUID.randomUUID();
        Id projectId = createProject(orgId, "{\"name\": \"" + name + "\"}");
        deleteProject(orgId, projectId);
        assertThrows(Exception.class, () -> getProject(orgId, projectId));
    }

    @Test
    public void プロジェクトをアップデートできる() throws Exception {
        login("update.project", "update.project@example.com");
        Id orgId = createOrg("{}");
        Id projectId = createProject(orgId, "{ \"name\": \"update.project\" }" );
        String name = "name-" + UUID.randomUUID();
        updateProject(orgId, projectId, "{\"name\": \"" + name + "\"}");
        Project project = getProject(orgId, projectId);
        assertEquals(name, project.getName());
    }

    @Test
    public void コンフィグを作れる() throws Exception {
        login("create.config", "create.config@example.com");
        Id orgId = createOrg("{}");
        Id projectId = createProject(orgId, "{ \"name\": \"create.config\"}" );
        Id configId = createConfig(orgId, projectId, "{ \"name\": \"create.config\", \"memo\": \"memo\" }" );
        Config config = getConfig(orgId, projectId, configId);
        assertEquals("memo", config.getMemo());
    }

    @Test
    public void コンフィグを更新できる() throws Exception {
        login("update.config", "update.config@example.com");
        Id orgId = createOrg("{}");
        Id projectId = createProject(orgId, "{ \"name\":\"update.config\" }");
        Id configId = createConfig(orgId, projectId, "{ \"memo\":\"memo1\" }");
        updateConfig(
                orgId, projectId, configId,
                String.format("{ \"id\":\"%s\", \"memo\":\"memo2\" }", configId));
        Config config = getConfig(orgId, projectId, configId);
        assertEquals("memo2", config.getMemo());
    }

    @Test
    public void コンフィグを更新する時ConfigIdに矛盾があるとエラーになる() throws Exception {
        login("update.config.error", "update.config.error@example.com");
        Id orgId = createOrg("{}");
        Id projectId = createProject(orgId, "{\"name\":\"test\"}");
        Id configId = createConfig(orgId, projectId, "{ \"name\":\"test\" }");
        assertThrows(Exception.class, () -> {
            updateConfig(
                    orgId, projectId, configId,
                    String.format("{ \"id\":\"%s\" }", Id.create()));
        });
    }

    @Nested
    class 組織メンバーに関するテスト {
        private Id accountId;
        private Id orgId;
        private Id orgMemberId;

        @BeforeEach
        public void setup() throws Exception {
            login("org.test", "org.test@example.com");
            accountId = getAccount("me").getId();
            orgId = createOrg("{}");
            orgMemberId = createOrgMember(orgId, new Gson().toJson(ImmutableMap.of("accountId", accountId.toString())));
        }

        @Test
        public void 組織メンバーを取得できる() throws Exception {
            OrgMember orgMember = getOrgMember(orgId, orgMemberId);
            assertEquals(accountId, orgMember.getAccountId());
        }

        @Test
        public void 全ての組織メンバーを取得できる() throws Exception {
            Id accountId2 = createAccount(new Gson().toJson(ImmutableMap.of("mail", "other@example.com", "name", "other")));
            Id orgMemberId2 = createOrgMember(orgId, new Gson().toJson(ImmutableMap.of("accountId", accountId2.toString())));
            OrgMember orgMember1 = getOrgMember(orgId, orgMemberId);
            OrgMember orgMember2 = getOrgMember(orgId, orgMemberId2);
            OrgMembers orgMembers = getOrgMembers(orgId);
            assertTrue(orgMembers.contains(orgMember1));
            assertTrue(orgMembers.contains(orgMember2));
        }

        @Test
        public void 組織メンバー一覧を取得できる() throws Exception {
            Ids orgMemberIds = listOrgMembers(orgId);
            assertTrue(orgMemberIds.contains(orgMemberId));
        }

        @Test
        public void 組織メンバーを削除できる() throws Exception {
            deleteOrgMember(orgId, orgMemberId);
            Ids orgMemberIds = listOrgMembers(orgId);
            assertFalse(orgMemberIds.contains(orgMemberId));
        }

        @Test
        public void 組織メンバーを更新できる() throws Exception {
            updateOrgMember(orgId, orgMemberId, new Gson().toJson(ImmutableMap.of(
                    "id", orgMemberId.toString(),
                    "accountId", accountId.toString(),
                    "role", OrgMember.Role.Owner.toString())));
            OrgMember orgMember = getOrgMember(orgId, orgMemberId);
            assertEquals(OrgMember.Role.Owner, orgMember.getRole());
        }
    }

    public void login(String name, String mail) throws Exception {
        //params.put("SAMLResponse", "hogehoge");
        Map<String,String> params = new HashMap<>();
        params.put("name", name);
        params.put("mail", mail);
        client.post("/login/debug", params, null);
    }

    public Id createOrg(String body) throws Exception {
        String jsonProjectId = client.post("/orgs/", null, body);
        return Id.createFromJson(jsonProjectId);
    }

    public Orgs getOrgs() throws Exception {
        String json = client.get("/orgs/all");
        return Orgs.createFromJson(json);
    }

    public Id createProject(Id orgId, String body) throws Exception {
        String jsonProjectId = client.post("/orgs/" + orgId + "/projects/", null, body);
        return Id.createFromJson(jsonProjectId);
    }

    public Ids listProjects(Id orgId) throws Exception {
        String jsonProjectIds = client.get("/orgs/" + orgId + "/projects");
        return Ids.createFromJson(jsonProjectIds);
    }

    public Project getProject(Id orgId, Id projectId) throws Exception {
        String jsonProject = client.get("/orgs/" + orgId + "/projects/" + projectId);
        //System.out.println(jsonProject);
        return Project.createFromJson(jsonProject);
    }

    public Projects getProjectAll(Id orgId) throws Exception {
        String jsonProject = client.get("/orgs/" + orgId + "/projects/all");
        return Projects.createFromJson(jsonProject);
    }

    public void deleteProject(Id orgId, Id projectId) throws Exception {
        client.delete("/orgs/" + orgId + "/projects/" + projectId);
    }

    public void updateProject(Id orgId, Id projectId, String body) throws Exception {
        client.put("/orgs/" + orgId + "/projects/" + projectId, body);
    }

    public Id createConfig(Id orgId, Id projectId, String body) throws Exception {
        String jsonConfigId = client.post("/orgs/" + orgId + "/projects/" + projectId + "/configs/", null, body);
        return Id.createFromJson(jsonConfigId);
    }

    public Config getConfig(Id orgId, Id projectId, Id configId) throws Exception {
        String jsonConfig = client.get("/orgs/" + orgId + "/projects/" + projectId + "/configs/" + configId);
        return Config.createFromJson(jsonConfig);
    }

    public void updateConfig(Id orgId, Id projectId, Id configId, String body) throws Exception {
        client.put("/orgs/" + orgId + "/projects/" + projectId + "/configs/" + configId, body);
    }

    public Id createAccount(String body) throws Exception {
        String accountId = client.post("/accounts/", null, body);
        return Id.createFromJson(accountId);
    }

    public Account getAccount(Id accountId) throws Exception {
        String account = client.get("/accounts/" + accountId);
        return Account.createFromJson(account);
    }

    public Account getAccount(String accountIdStr) throws Exception {
        String account = client.get("/accounts/" + accountIdStr);
        return Account.createFromJson(account);
    }

    public Account updateAccount(Id accountId, String body) throws Exception {
        String account = client.put("/accounts/" + accountId, body);
        return Account.createFromJson(account);
    }

    public Accounts searchAccount(String nameKey) throws Exception {
        String accounts = client.get("/accounts/search?nameKey="+nameKey);
        return Accounts.createFromJson(accounts);
    }

    public Id createOrgMember(Id orgId, String body) throws Exception {
        String jsonOrgMemberId = client.post("/orgs/" + orgId + "/members/", null, body);
        return Id.createFromJson(jsonOrgMemberId);
    }

    public OrgMember getOrgMember(Id orgId, Id orgMemberId) throws Exception {
        String jsonOrgMember = client.get("/orgs/" + orgId + "/members/" + orgMemberId);
        //System.out.println(jsonOrgMember);
        return OrgMember.createFromJson(jsonOrgMember);
    }

    public OrgMembers getOrgMembers(Id orgId) throws Exception {
        String jsonOrgMember = client.get("/orgs/" + orgId + "/members/all");
        return OrgMembers.createFromJson(jsonOrgMember);
    }

    public Ids listOrgMembers(Id orgId) throws Exception {
        String jsonOrgMemberIds = client.get("/orgs/" + orgId + "/members");
        //System.out.println(jsonOrgMemberIds);
        return Ids.createFromJson(jsonOrgMemberIds);
    }

    public void deleteOrgMember(Id orgId, Id orgMemberId) throws Exception {
        client.delete("/orgs/" + orgId + "/members/" + orgMemberId);
    }

    public void updateOrgMember(Id orgId, Id orgMemberId, String body) throws Exception {
        client.put("/orgs/" + orgId + "/members/" + orgMemberId, body);
    }

}
